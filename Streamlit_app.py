import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from wordcloud import WordCloud
import requests
from bs4 import BeautifulSoup
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from dotenv import load_dotenv
import os
from code.creacion_rese√±as import extraer_datos_y_unir_2
from sklearn.preprocessing import OneHotEncoder
import pickle
import zipfile
from code.limpieza import limpiezadedatos
from scipy import stats


# Configurar la p√°gina
st.set_page_config(page_title="Airbnb Insights", page_icon="üè†", layout='wide')

# Estilos CSS personalizados
st.markdown(
    """
    <style>
    /* Fondo de la barra lateral en color salm√≥n con transparencia */
    .stSidebar {
        background-color: rgba(255, 90, 95, 0.7) !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)
try:
    # Intentar cargar el archivo CSV
    df = pd.read_csv('objetos/Airbnb.csv')
    print("Archivo CSV cargado exitosamente.")
except FileNotFoundError:
    print("Archivo 'Airbnb.csv' no encontrado. Intentando descomprimir 'Airbnb.csv.zip'...")

    # Intentar descomprimir el archivo zip
    try:
        with zipfile.ZipFile('objetos/Airbnb.csv.zip', 'r') as zip_ref:
            zip_ref.extractall('objetos')  # Extrae en la carpeta 'objetos'
        print("Archivo descomprimido exitosamente.")

        # Intentar cargar el CSV nuevamente despu√©s de descomprimir
        df = pd.read_csv('objetos/Airbnb.csv')
        print("Archivo CSV cargado exitosamente despu√©s de descomprimir.")

    except FileNotFoundError:
        print("Archivo 'Airbnb.csv.zip' no encontrado. Verifica que el archivo est√© en el directorio.")
    except zipfile.BadZipFile:
        print("El archivo 'Airbnb.csv.zip' est√° da√±ado o no es un archivo ZIP v√°lido.")

# Convertir el resultado de unique() a una lista
ciudades = df['city'].unique().tolist()
df_sin_na = df.dropna()
df_limpio = limpiezadedatos(df_sin_na)

# Custom CSS to control icon size, color, and styling
st.sidebar.markdown(
    """
    <style>
    .linkedin-icon {
        width: 20px; /* Ajusta el tama√±o del icono */
        height: 20px;
        vertical-align: middle;
        margin-right: 10px; /* Espacio entre el icono y el nombre */
    }
    .team-member {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .team-member a {
        text-decoration: none; /* Quita el subrayado del enlace */
        color: black; /* Cambia el color del texto a negro */
    }
    .member-name {
        font-style: italic; /* Pone el nombre en cursiva */
    }
    </style>
    """,
    unsafe_allow_html=True
)



def obtener_imagen_ciudad(city):
    """
    Funci√≥n para obtener una imagen de una ciudad usando la API de Unsplash.
    """
     # Arma los headers con la clave de Unsplash desde st.secrets
    headers = {
        "Authorization": f"Client-ID {st.secrets['UNSPLASH_ACCESS_KEY']}",
        "Content-Type": "application/json"
    }
    
    # Agregar "city" al t√©rmino de b√∫squeda para especificar que queremos una imagen de la ciudad
    query = f"{city} city"
    url = f"https://api.unsplash.com/search/photos?query={query}&per_page=1"
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        if data["results"]:
            return data["results"][0]["urls"]["regular"]
        else:
            st.write(f"No se encontraron im√°genes para la ciudad: {city}")
            return None
    else:
        st.write("Error al conectarse a la API de Unsplash.")
        return None
def inicio():
    st.title("üè† Bienvenido a Airbnb Insights")

# Secci√≥n combinada de bienvenida y descripci√≥n de la app
    st.markdown("""
    <div style='background-color: #f5f5f5; padding: 30px; border-radius: 12px; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);'>
        <h2 style='color: #ab47bc; text-align: center; font-family: Arial, sans-serif; font-weight: bold;'>Descubre el Potencial de Airbnb en Tu Ciudad</h2>
        <p style='color: #424242; text-align: center; font-size: 16px; margin-top: 10px;'>Esta aplicaci√≥n fue creada como proyecto fin de bootcamp de Hackaboss.</p>
        <p style='color: #424242; font-size: 15px; margin-top: 20px; line-height: 1.6;'>Con esta herramienta, podr√°s realizar un an√°lisis exhaustivo del mercado de Airbnb, incluyendo:</p>
        <ul style='color: #424242; font-size: 15px; padding-left: 20px; line-height: 1.8;'>
            <li><b>An√°lisis Exploratorio de Datos</b>: Exploraci√≥n de listados de Airbnb mediante <i>web scraping</i>.</li>
            <li><b>An√°lisis de Sentimiento de Rese√±as</b>: Comparaci√≥n de ratings de alojamientos con un an√°lisis de sentimiento de las opiniones de los usuarios.</li>
            <li><b>Calculadora de Precios</b>: Predicci√≥n del precio adecuado para un Airbnb basado en la ciudad y caracter√≠sticas del alojamiento.</li>
        </ul>
        <p style='color: #424242; font-size: 15px; line-height: 1.6;'>A trav√©s de <b>web scraping</b>, hemos recopilado una amplia gama de informaci√≥n sobre m√∫ltiples ciudades. Esta informaci√≥n nos permite analizar diferentes aspectos del mercado, como las caracter√≠sticas de los alojamientos, las valoraciones de los hu√©spedes y las rese√±as dejadas por los usuarios. Utilizando m√©todos de procesado de lenguaje natural como es el <b>an√°lisis de sentimiento</b>, hemos utilizado las opiniones de los hu√©spedes para identificar patrones y obtener una comprensi√≥n profunda de lo que los usuarios valoran o critican en los alojamientos. Adem√°s, en base a los precios de los alojamientos en cada ciudad, hemos desarrollado una <b>calculadora predictiva de precios</b>. Esta herramienta analiza las tarifas actuales de Airbnb en una ciudad espec√≠fica y, utilizando algoritmos de aprendizaje autom√°tico, estima el precio adecuado para tu alojamiento. Esta estimaci√≥n no solo toma en cuenta las caracter√≠sticas de tu propiedad, sino que tambi√©n se ajusta en funci√≥n de los precios de otros alojamientos en la misma ciudad, brind√°ndote una recomendaci√≥n precisa y competitiva. As√≠, puedes asegurarte de que tu Airbnb est√© alineado con el mercado local y maximizar tu ocupaci√≥n y rentabilidad.</p>
    </div>
    """, unsafe_allow_html=True)
    

def dashboard(df_limpio,ciudad_seleccionada):

    st.title("üìä Dashboard de Airbnb Insights")

    # Obtener las ciudades √∫nicas
    ciudades_unicas = df_limpio['city'].unique()

    # Filtrar el DataFrame por la ciudad seleccionada
    df_ciudad = df_limpio[df_limpio['city'] == ciudad_seleccionada]

    # Obtener la URL de la imagen de la ciudad seleccionada
    imagen_url = obtener_imagen_ciudad(ciudad_seleccionada)

    # Calcular estad√≠sticas principales
    total_alojamientos = len(df_ciudad)
    mean_rating = df_ciudad['rating'].mean()
    mean_price = df_ciudad['price'].mean()

    # Disposici√≥n en columnas para imagen y texto
    col1, col2 = st.columns([1, 2])  # La primera columna es m√°s peque√±a para la imagen, y la segunda es m√°s amplia para el texto

    with col1:
        # Mostrar la imagen de la ciudad en la columna izquierda
        if imagen_url:
            st.image(imagen_url, caption=f"Vista de {ciudad_seleccionada}", use_column_width=True)

    with col2:
        # Contenedor principal del Dashboard en la columna derecha
        st.markdown("""
            <div style='background-color: #f5f5f5; padding: 20px; border-radius: 10px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);'>
                <h2 style='color: #ab47bc; text-align: center; font-family: Arial, sans-serif; font-weight: bold;'>Resumen de Datos de Airbnb</h2>
                <p style='color: #4a4a4a;'>Visualiza los principales indicadores de Airbnb en la ciudad seleccionada para tener una visi√≥n general del mercado.</p>
            </div>
            """, unsafe_allow_html=True)

        # Tarjetas de estad√≠sticas principales con datos calculados
        st.markdown(f"""
            <div style='display: flex; gap: 20px; margin-top: 20px;'>
                <div style='flex: 1; background-color: #eaf4fc; padding: 15px; border-radius: 10px; text-align: center; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);'>
                    <h3 style='font-size: 24px; color: #1e3d59;'>üåÜ Ciudad Seleccionada</h3>
                    <p style='font-size: 24px; font-weight: bold; color: #1e3d59;'>{ciudad_seleccionada}</p>
                </div>
                <div style='flex: 1; background-color: #f9f4f4; padding: 15px; border-radius: 10px; text-align: center; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);'>
                    <h3 style='font-size: 24px;color: #1e3d59;'>üè† Total de Alojamientos</h3>
                    <p style='font-size: 24px; font-weight: bold; color: #1e3d59;'>{total_alojamientos}</p>
                </div>
                <div style='flex: 1; background-color: #f4f9f4; padding: 15px; border-radius: 10px; text-align: center; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);'>
                    <h3 style='font-size: 24px;color: #1e3d59;'>‚≠ê Rating Promedio</h3>
                    <p style='font-size: 24px; font-weight: bold; color: #1e3d59;'>{mean_rating:.1f}</p>
                </div>
                <div style='flex: 1; background-color: #fcf4e4; padding: 15px; border-radius: 10px; text-align: center; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);'>
                    <h3 style='font-size: 24px;color: #1e3d59;'>üí∂ Precio Promedio</h3>
                    <p style='font-size: 24px; font-weight: bold; color: #1e3d59;'>‚Ç¨{mean_price:.2f}/noche</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
        # Nueva secci√≥n despu√©s del Dashboard
    st.title("üîÑ Actualizaci√≥n de Datos de Airbnb")

    # Explicaci√≥n sobre el proceso de Web Scraping
    st.markdown("""
    <div style='background-color: #f5f5f5; padding: 20px; border-radius: 12px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); margin-top: 20px;'>
        <h2 style='color: #ab47bc; text-align: center; font-family: Arial, sans-serif; font-weight: bold;'>Actualizaci√≥n de Datos mediante Web Scraping</h2>
        <p style='color: #4a4a4a; line-height: 1.6;'>
            Dado que el proceso de web scraping puede llevar m√°s de 2 horas debido a la cantidad de datos que se recopilan, no ha sido posible incluirlo directamente en esta aplicaci√≥n.
        </p>
        <p style='color: #4a4a4a; line-height: 1.6;'>
            Si deseas realizar un nuevo scraping para obtener datos actualizados de una ciudad en particular, puedes descargar el script correspondiente.
            Solo necesitas especificar la ciudad y el pa√≠s de tu inter√©s, y el script se encargar√° de recopilar los datos m√°s recientes de Airbnb.
        </p>
    </div>
    """, unsafe_allow_html=True)
    #Bot√≥n para descargar scrapping
    with open("code/scraping.py", "rb") as file:
        st.download_button(
            label="üì• Descargar Script de Web Scraping",
            data=file,
            file_name="scraping.py",
            mime="text/x-python"  # MIME espec√≠fico para archivos .ipynb
        )


def analis_exploratorio(ciudad_seleccionada):
    # Configuraci√≥n de estilos
    sns.set(style="whitegrid")  # Fondo claro

    # T√≠tulo
    st.markdown("<h1 style='text-align: center; color: #ab47bc;'>Visualizaci√≥n de Datos de Airbnb</h1>", unsafe_allow_html=True)

    # Filtrar el DataFrame por la ciudad seleccionada
    df_ciudad = df_limpio[df_limpio['city'] == ciudad_seleccionada]

    # Caja de informaci√≥n general
    st.markdown(f"""
    <div style='background-color: #f5f5f5; padding: 20px; border-radius: 12px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); margin-bottom: 20px;'>
        <h2 style='text-align: center; color: #333333; font-weight: bold;'>Informaci√≥n General</h2>
        <p style='color: #4a4a4a; line-height: 1.6;'>
            Esta secci√≥n te permite explorar informaci√≥n sobre los alojamientos de Airbnb mediante gr√°ficos que analizan distintos aspectos del mercado en la ciudad seleccionada.
        </p>
        <p style='color: #4a4a4a; line-height: 1.6;'>
            <b>Histogramas y gr√°ficos de barras:</b> Estos gr√°ficos revelan la distribuci√≥n de valores en cada variable, facilitando la identificaci√≥n de distribuciones normales, sesgos, valores at√≠picos y asimetr√≠as.
        </p>
        <p style='color: #4a4a4a; line-height: 1.6;'>
            <b>Gr√°ficos de calor:</b> Visualizan la relaci√≥n entre variables mediante colores, facilitando la detecci√≥n de patrones, correlaciones y tendencias en los datos.
        </p>
    </div>
    """, unsafe_allow_html=True)

    # Opciones de gr√°ficos y paleta de colores
    chart_options = ["Distribuci√≥n de Calificaci√≥n", "Distribuci√≥n de Precio", "Precio por Tipo de Anfitri√≥n",
                     "Relaci√≥n Precio-Calificaci√≥n", "Tiempo de Hospedaje", "3D Interactivo"]
    palette = ['#16C6F5', '#FFD700', '#FF69B4', '#7CFC00']

    # Selector de gr√°ficos
    selected_chart = st.selectbox("Selecciona el gr√°fico que deseas ver:", chart_options)

    # Funci√≥n para gr√°ficos 2D
    def plot_chart(chart_type):
        if chart_type == "Distribuci√≥n de Calificaci√≥n":
            st.header("Distribuci√≥n de Calificaci√≥n")
            fig = px.histogram(df_ciudad, x='rating', nbins=20, title='Distribuci√≥n de Calificaci√≥n',
                               color_discrete_sequence=[palette[0]])
            fig.update_layout(xaxis_title="Calificaci√≥n", yaxis_title="Frecuencia", title_x=0.5)
            st.plotly_chart(fig)

        elif chart_type == "Distribuci√≥n de Precio":
            st.header("Distribuci√≥n de Precio")
            fig = px.histogram(df_ciudad, x='price', nbins=20, title='Distribuci√≥n de Precio',
                               color_discrete_sequence=[palette[1]])
            fig.add_vline(x=df_ciudad['price'].mean(), line_dash="dash", line_color=palette[2], 
                          annotation_text="Media", annotation_position="top right")
            fig.update_layout(xaxis_title="Precio", yaxis_title="Frecuencia", title_x=0.5)
            st.plotly_chart(fig)

        elif chart_type == "Precio por Tipo de Anfitri√≥n":
            st.header("Distribuci√≥n de Precio por Tipo de Anfitri√≥n")
            fig = px.violin(df_ciudad, x='type_host', y='price', box=True, points="all", 
                            title="Distribuci√≥n de Precio por Tipo de Anfitri√≥n", color_discrete_sequence=[palette[3]])
            fig.update_layout(xaxis_title="Tipo de Anfitri√≥n", yaxis_title="Precio", title_x=0.5)
            st.plotly_chart(fig)

        elif chart_type == "Relaci√≥n Precio-Calificaci√≥n":
            st.header("Relaci√≥n entre Precio y Calificaci√≥n")
            fig = px.density_heatmap(df_ciudad, x='price', y='rating', title="Relaci√≥n entre Precio y Calificaci√≥n",
                                     color_continuous_scale='Plasma')
            fig.update_layout(xaxis_title="Precio", yaxis_title="Calificaci√≥n", title_x=0.5)
            st.plotly_chart(fig)

        elif chart_type == "Tiempo de Hospedaje":
            st.header("Distribuci√≥n del Tiempo de Hospedaje")
            fig = px.histogram(df_ciudad, x='hosting_time', nbins=20, title='Distribuci√≥n del Tiempo de Hospedaje',
                               color_discrete_sequence=[palette[2]])
            fig.add_vline(x=df_ciudad['hosting_time'].median(), line_dash="dash", line_color="red", 
                          annotation_text="Mediana", annotation_position="top right")
            fig.update_layout(xaxis_title="A√±os de Hospedaje", yaxis_title="Frecuencia", title_x=0.5)
            st.plotly_chart(fig)

    # Gr√°fico 3D Interactivo
    def plot_3d():
        df_ciudad.drop(columns= 'Unnamed: 0', inplace=True)
        st.header("Gr√°fico 3D Interactivo")
        x_axis = st.selectbox("Selecciona el eje X:", df_ciudad.columns, index=list(df_ciudad.columns).index('rating'))
        y_axis = st.selectbox("Selecciona el eje Y:", df_ciudad.columns, index=list(df_ciudad.columns).index('price'))
        z_axis = st.selectbox("Selecciona el eje Z:", df_ciudad.columns, index=list(df_ciudad.columns).index('number_reviews'))
        color_option = st.selectbox("Selecciona la variable de color:", df_ciudad.columns)

        fig = px.scatter_3d(df_ciudad, x=x_axis, y=y_axis, z=z_axis, color=color_option,
                            size_max=18, opacity=0.8, color_continuous_scale='Viridis',
                            title=f'Relaci√≥n entre {x_axis}, {y_axis}, y {z_axis}')
        st.plotly_chart(fig)

    # Mostrar gr√°fico seleccionado
    if selected_chart == "3D Interactivo":
        plot_3d()
    else:
        plot_chart(selected_chart)



def analisis_resenas(ciudad_seleccionada):
    """
    Funci√≥n para mostrar un an√°lisis de las predicciones frente a los valores reales en Streamlit,
    mostrando el t√≠tulo de cada Airbnb individualmente con sus tablas respectivas.
    """
    st.markdown("<h1 style='text-align: center; color: #ab47bc;'>An√°lisis de Sentimiento en Rese√±as de Airbnb</h1>", unsafe_allow_html=True)
    
    st.markdown("""
    <div style='display: flex; justify-content: center;'>
        <p style='color: #ff9800; font-size: 16px; display: flex; align-items: center;'>
            <span style='font-size: 20px;'>‚ö†Ô∏è</span>
            <span style='margin-left: 10px;'>Nota: Los resultados presentados se han calculado previamente para optimizar el rendimiento de la aplicaci√≥n.</span>
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Caja gris para la descripci√≥n de la secci√≥n
    st.markdown("""
        <div style='background-color: #f5f5f5; padding: 20px; border-radius: 12px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); margin-bottom: 20px;'>
           <h2 style='text-align: center; color: #333333; font-weight: bold;'>Exploraci√≥n de Opiniones y Valoraciones de Usuarios</h2>
            <p style='color: #4a4a4a; line-height: 1.6;'>
                En esta secci√≥n, podr√°s explorar en profundidad el an√°lisis de rese√±as de usuarios en Airbnb. Utilizando t√©cnicas de <b>an√°lisis de sentimiento</b>, hemos evaluado las opiniones y valoraciones de los hu√©spedes en funci√≥n de sus comentarios.
            </p>
            <p style='color: #4a4a4a; line-height: 1.6;'>
                Nuestro enfoque se centra en comparar las calificaciones de los alojamientos con los resultados del an√°lisis de sentimiento de las rese√±as. De esta manera, puedes visualizar la alineaci√≥n (o discrepancia) entre las opiniones textuales de los hu√©spedes y las puntuaciones que otorgan. 
            </p>
        </div>
    """, unsafe_allow_html=True)
    # Extraer los datos
    predicciones_df = extraer_datos_y_unir_2()

    # Obtener las ciudades √∫nicas
    ciudades_unicas = predicciones_df['city'].unique()

    # Sidebar para selecci√≥n de ciudad
    #st.sidebar.title("üèôÔ∏è Selecciona una ciudad")
    #ciudad_seleccionada = st.sidebar.selectbox("Ciudad", ciudades_unicas)

    # Obtener la URL de la imagen de la ciudad seleccionada
    imagen_url = obtener_imagen_ciudad(ciudad_seleccionada)

    # Mostrar la imagen de la ciudad seleccionada en la parte superior
    if imagen_url:
        st.image(imagen_url, caption=f"Vista de {ciudad_seleccionada}", use_column_width=True)

    # Filtrar el DataFrame por ciudad seleccionada
    df_ciudad = predicciones_df[predicciones_df['city'] == ciudad_seleccionada].head(2)

    # Funci√≥n para crear una tabla HTML sin √≠ndice
    def create_table_html(data):
        table_html = "<table style='width:100%; border-collapse: collapse;'>"
        # Header
        table_html += "<thead><tr style='background-color: #f5f5f5;'>"
        for col in data.columns:
            table_html += f"<th style='border: 1px solid #e0e0e0; padding: 8px; font-weight: bold;'>{col}</th>"
        table_html += "</tr></thead>"
        # Rows
        table_html += "<tbody>"
        for _, row in data.iterrows():
            table_html += "<tr>"
            for cell in row:
                table_html += f"<td style='border: 1px solid #e0e0e0; padding: 8px;'>{cell}</td>"
            table_html += "</tr>"
        table_html += "</tbody></table>"
        return table_html

    # Mostrar cada Airbnb en un expander ocupando el ancho completo
    for idx, row in df_ciudad.iterrows():
        with st.expander(f"{row['title']}"):
            # T√≠tulo grande dentro del expander
            st.markdown(f"<h3 style='font-size: 24px; margin: 0;'>{row['title']}</h3>", unsafe_allow_html=True)

            # T√≠tulos de las secciones con tama√±o de fuente reducido
            st.markdown("<h4 style='font-size: 18px;'>Calificaci√≥n y Predicci√≥n</h4>", unsafe_allow_html=True)
            # Tabla de calificaci√≥n y predicci√≥n (sin √≠ndice usando HTML directo)
            tabla_pred = pd.DataFrame({
                "Rating Real": [row['Valor Real']],
                "Predicci√≥n NLP": [row['Predicci√≥n']]
            })
            st.markdown(create_table_html(tabla_pred), unsafe_allow_html=True)

            st.markdown("<h4 style='font-size: 18px;'>Caracter√≠sticas del Alojamiento</h4>", unsafe_allow_html=True)
            # Tabla de caracter√≠sticas del alojamiento con iconos y colores condicionales (sin √≠ndice usando HTML directo)
            tabla_caracteristicas = pd.DataFrame({
                "Precio": [f"‚Ç¨{int(row['price'])}"],
                "Tipo de Hu√©sped": ["üë§ Superhost" if row['type_host'] == "Superhost" else "üë§ Host"],
                "N√∫mero de Rese√±as": [int(row['number_reviews'])],
                "N√∫mero de Hu√©spedes": [f"üë• {int(row['number_guest'])}"],
                "N√∫mero de Habitaciones": [f"üõå {int(row['number_bedroom'])}"],
                "N√∫mero de Camas": [f"üõèÔ∏è {int(row['number_beds'])}"],
                "Tipo de Ba√±o": [row['type_bathroom']],
                "N√∫mero de Ba√±os": [f"üöΩ {int(row['number_bathroom'])}"]
            })
            st.markdown(create_table_html(tabla_caracteristicas), unsafe_allow_html=True)







def modelo_prediccion(ciudad_seleccionada):
    # Encabezado principal 
    st.markdown("<h1 style='text-align: center; color: #ab47bc;'>Modelo de Predicci√≥n de Precios de Airbnb</h1>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center; color: #7B7D7D;'>Obt√©n una estimaci√≥n del rango de precios para tu alojamiento</h3>", unsafe_allow_html=True)
    

    st.markdown("""
        <div style='background-color: #f5f5f5; padding: 20px; border-radius: 12px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); margin-bottom: 20px;'>
            <h2 style='text-align: center;color: #333333; font-weight: bold;'>Estimaci√≥n de Precios de Alojamientos en Airbnb</h2>
            <p style='color: #4a4a4a; line-height: 1.6;'>
                Esta secci√≥n permite estimar el rango de precios de alojamientos en funci√≥n de caracter√≠sticas espec√≠ficas (como ciudad, tipo de ba√±o, n√∫mero de habitaciones y capacidad de hu√©spedes). Utiliza t√©cnicas de <b>aprendizaje autom√°tico</b> para analizar los datos hist√≥ricos de Airbnb y, a trav√©s de modelos de clasificaci√≥n y regresi√≥n, determina patrones y relaciones en las caracter√≠sticas de los alojamientos.
            </p>
            <p style='color: #4a4a4a; line-height: 1.6;'>
                Primero, asigna cada alojamiento a un cl√∫ster espec√≠fico para reflejar mejor sus caracter√≠sticas y, luego, aplica un modelo de regresi√≥n optimizado para estimar el precio y su rango probable. Esto permite obtener una predicci√≥n m√°s precisa y personalizada para cada alojamiento, asegurando que el precio est√© alineado con la competencia local.
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Texto de instrucciones con margen superior para mayor separaci√≥n
    st.markdown("<p style='color: #7B7D7D; margin-top: 20px;'>Completa los detalles de tu alojamiento para obtener una estimaci√≥n de precio.</p>", unsafe_allow_html=True)
    
    # Cargar el modelo de clasificaci√≥n entrenado
    with open('./objetos/modelo_clasificacion.pkl', 'rb') as file:
        modelo_clasificacion = pickle.load(file)
    
    # Cargar los modelos de regresi√≥n entrenados para cada cl√∫ster
    with open('./objetos/modelo_c0.pkl', 'rb') as file:
        modelo_c0 = pickle.load(file)
    with open('./objetos/modelo_c1.pkl', 'rb') as file:
        modelo_c1 = pickle.load(file)
    with open('./objetos/modelo_c2.pkl', 'rb') as file:
        modelo_c2 = pickle.load(file)
    
    # Cargar los percentiles del error absoluto para cada modelo
    with open('./objetos/percentiles_modelo0.pkl', 'rb') as file:
        percentil_inferior0, percentil_superior0 = pickle.load(file)
    with open('./objetos/percentiles_modelo1.pkl', 'rb') as file:
        percentil_inferior1, percentil_superior1 = pickle.load(file)
    with open('./objetos/percentiles_modelo2.pkl', 'rb') as file:
        percentil_inferior2, percentil_superior2 = pickle.load(file)

    # Cargar los encoders y columnas
    with open('./objetos/encoder_city.pkl', 'rb') as file:
        encoder_city = pickle.load(file)
    with open('./objetos/city_columns.pkl', 'rb') as file:
        city_columns = pickle.load(file)
    with open('./objetos/encoder_bathroom.pkl', 'rb') as file:
        encoder_bathroom = pickle.load(file)
    with open('./objetos/bathroom_columns.pkl', 'rb') as file:
        bathroom_columns = pickle.load(file)
    with open('./objetos/columnas_X.pkl', 'rb') as file:
        columnas_X = pickle.load(file)

   
   
    # Seleccionar las ciudades desde el DataFrame
    #ciudades = df['city'].unique()
    #st.sidebar.title("üèôÔ∏è Selecciona una ciudad")
    #ciudad_seleccionada = st.sidebar.selectbox("Ciudad", ciudades)
    #city = st.selectbox("üìç Ciudad", ciudades, help="Selecciona la ciudad de tu alojamiento")
    type_bathroom = st.selectbox("üõÅ Tipo de ba√±o", ["private", "shared"], help="Selecciona el tipo de ba√±o")
    number_bedroom = st.number_input("üõå N√∫mero de habitaciones", min_value=0, step=1, help="Especifica la cantidad de habitaciones")
    number_beds = st.number_input("üõèÔ∏è N√∫mero de camas", min_value=0, step=1, help="Especifica el n√∫mero de camas disponibles")
    number_guest = st.number_input("üë• N√∫mero de hu√©spedes", min_value=1, step=1, help="Indica la capacidad m√°xima de hu√©spedes")
    
    # Espacio visual y bot√≥n estilizado
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("üìä Calcular Rango de Precios"):
        # Crear un DataFrame con los datos del usuario
        nuevos_datos = {
            "city": [ciudad_seleccionada],
            "type_bathroom": [type_bathroom],
            "number_bedroom": [number_bedroom],
            "number_beds": [number_beds],
            "number_guest": [number_guest]
        }
        df_nuevos_datos = pd.DataFrame(nuevos_datos)

        # Aplicar las transformaciones de One-Hot Encoding
        city_encoded = encoder_city.transform(df_nuevos_datos[['city']]).toarray()
        city_df = pd.DataFrame(city_encoded, columns=city_columns)
        
        bathroom_encoded = encoder_bathroom.transform(df_nuevos_datos[['type_bathroom']]).toarray()
        bathroom_df = pd.DataFrame(bathroom_encoded, columns=bathroom_columns)

        # Combinar todas las columnas
        df_nuevos_datos = pd.concat([df_nuevos_datos.reset_index(drop=True), city_df, bathroom_df], axis=1)
        df_nuevos_datos = df_nuevos_datos.reindex(columns=columnas_X, fill_value=0)

        # **Paso 1**: Predecir el cl√∫ster usando el modelo de clasificaci√≥n
        cluster_predicho = modelo_clasificacion.predict(df_nuevos_datos)[0]
        
        # **Paso 2**: Seleccionar el modelo de regresi√≥n adecuado y sus percentiles
        if cluster_predicho == 0:
            modelo_regresion = modelo_c0
            percentil_superior = percentil_superior0
            percentil_inferior = percentil_inferior0
        elif cluster_predicho == 1:
            modelo_regresion = modelo_c1
            percentil_superior = percentil_superior1
            percentil_inferior = percentil_inferior1
        elif cluster_predicho == 2:
            modelo_regresion = modelo_c2
            percentil_superior = percentil_superior2
            percentil_inferior = percentil_inferior2
        else:
            st.error("Error: Cl√∫ster predicho no v√°lido.")
            return  # Salir de la funci√≥n si el cl√∫ster no es v√°lido

        # **Paso 3**: Realizar la predicci√≥n con el modelo de regresi√≥n
        prediccion = modelo_regresion.predict(df_nuevos_datos)

        # Calcular el rango de precios usando los percentiles
        intervalo_inferior = prediccion[0] - percentil_superior
        intervalo_superior = prediccion[0] + percentil_superior

        # Mostrar el resultado 
    
        
        st.markdown(f"""
        <div style='background-color: #f5f5f5; padding: 20px; border-radius: 10px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); margin-top: 20px;'>
        <h3 style='text-align: center; color: #ab47bc;'>Precio estimado: ‚Ç¨{prediccion[0]:.2f}</h3>
        <h4 style='text-align: center; color: #7B7D7D;'>Rango de precio estimado para su Airbnb: ‚Ç¨{intervalo_inferior:.2f} - ‚Ç¨{intervalo_superior:.2f}</h4>
        </div>
        """, unsafe_allow_html=True)



# Aplicaci√≥n principal
def main():

    
    st.sidebar.title(" üó∫Ô∏è Men√∫ de Navegaci√≥n")  
    page = st.sidebar.selectbox("Selecciona una secci√≥n", ("Inicio","Dashboard", "An√°lisis Exploratorio","An√°lisis de Rese√±as", "Modelo de Predicci√≥n"))
    st.sidebar.title("üèôÔ∏è Selecciona una ciudad")
    ciudad_seleccionada = st.sidebar.selectbox("Ciudad", ciudades)

     
    st.sidebar.markdown("### üë• Equipo")
    
    st.sidebar.markdown(
        '<div class="team-member"><a href="https://www.linkedin.com/in/ignacio-rodriguez-galicia" target="_blank"><img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/LinkedIn_logo_initials.png" class="linkedin-icon"><span class="member-name">Ignacio Rodr√≠guez Galicia</span></a></div>',
        unsafe_allow_html=True
    )
    st.sidebar.markdown(
        '<div class="team-member"><a href="https://www.linkedin.com/in/steven-hurtado-figueroa-41120974?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=ios_app" target="_blank"><img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/LinkedIn_logo_initials.png" class="linkedin-icon"><span class="member-name">Steven Hurtado Figueroa</span></a></div>',
        unsafe_allow_html=True
    )
    st.sidebar.markdown(
        '<div class="team-member"><a href="https://www.linkedin.com/in/israel-mart%C3%ADnez-b5742a138?utm_source=share&utm_campaign=share_via&utm_content=profile&utm_medium=ios_app" target="_blank"><img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/LinkedIn_logo_initials.png" class="linkedin-icon"><span class="member-name">Israel Mart√≠nez</span></a></div>',
        unsafe_allow_html=True
    )
    
    st.sidebar.markdown(
        '<div class="team-member"><a href="https://www.linkedin.com/in/silvana-ruiz-medina-922397238" target="_blank"><img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/LinkedIn_logo_initials.png" class="linkedin-icon"><span class="member-name">Silvana Ruiz Medina</span></a></div>',
        unsafe_allow_html=True
    )
       
   

# Dise√±o del Dashboard
    if page == "Inicio":
        inicio()
        
    elif page == "Dashboard" :
        dashboard(df_limpio,ciudad_seleccionada)

    elif page== "An√°lisis Exploratorio":
        analis_exploratorio(ciudad_seleccionada)

    elif page == "An√°lisis de Rese√±as":
        analisis_resenas(ciudad_seleccionada)
  
    elif page == "Modelo de Predicci√≥n":
        modelo_prediccion(ciudad_seleccionada)

    

if __name__ == "__main__":
    main()
